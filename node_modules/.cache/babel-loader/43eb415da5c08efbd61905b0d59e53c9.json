{"ast":null,"code":"import _slicedToArray from \"/Users/sudarshan/Documents/personalProjects/csals-sorting-visualizer/Sorting-Visualizer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sudarshan/Documents/personalProjects/csals-sorting-visualizer/Sorting-Visualizer/src/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/MergeSort'; //import {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\n\nimport { getQuickSortAnimations } from '../SortingAlgorithms/QuickSort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/InsertionSort';\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/SelectionSort';\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/BubbleSort'; //Changing width,height accordingly with the browser\n\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n\nfunction reportWindowSize() {\n  WINDOW_WIDTH = window.innerWidth;\n  WINDOW_HEIGHT = window.innerHeight;\n  NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\n}\n\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\n\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\n\nconst ANIMATION_SPEED_MS = 10; //Animation Speed (how fast color changes, how fast height gets overwritten)\n//Tooltips for buttons\n\nconst DISABLED_BUTTON = \"Currently Disabled\";\nconst ENABLED_BUTTON = {\n  nlogn: \"O(NlogN) Time Complexity\",\n  nSquare: \"O(N^2) Time Complexity\"\n};\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  } //Generates new random array \n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\n    }\n\n    this.setState({\n      array: array\n    });\n    this.restoreStoreButtons();\n  }\n\n  disableSortButtons() {\n    document.getElementById(\"mergeSort\").disabled = true;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"quickSort\").disabled = true;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"insertionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"heapSort\").disabled = true;\n    buttonStyle = document.getElementById(\"heapSort\").style;\n    document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"selectionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"bubbleSort\").disabled = true;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n  }\n\n  restoreStoreButtons() {\n    document.getElementById(\"mergeSort\").disabled = false;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"quickSort\").disabled = false;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"bubbleSort\").disabled = false;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"selectionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"insertionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"heapSort\").disabled = false;\n    buttonStyle = document.getElementById(\"heapSort\").style;\n    document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n  } //Sorting Algorithms\n\n\n  mergeSort() {\n    this.disableSortButtons();\n\n    const _getMergeSortAnimatio = getMergeSortAnimations(this.state.array),\n          _getMergeSortAnimatio2 = _slicedToArray(_getMergeSortAnimatio, 2),\n          animations = _getMergeSortAnimatio2[0],\n          sortArray = _getMergeSortAnimatio2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIndex = _animations$i[0],\n              barTwoIndex = _animations$i[1];\n\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style; //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 2),\n                barOneIdx = _animations$i2[0],\n                newHeight = _animations$i2[1];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  quickSort() {\n    this.disableSortButtons();\n\n    const _getQuickSortAnimatio = getQuickSortAnimations(this.state.array),\n          _getQuickSortAnimatio2 = _slicedToArray(_getQuickSortAnimatio, 2),\n          animations = _getQuickSortAnimatio2[0],\n          sortArray = _getQuickSortAnimatio2[1];\n\n    for (let i = 0; i < animations.length - 1; i++) {\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i3 = _slicedToArray(animations[i], 2),\n              barOneIndex = _animations$i3[0],\n              barTwoIndex = _animations$i3[1];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i4 = _slicedToArray(animations[i], 2),\n              barIndex = _animations$i4[0],\n              newHeight = _animations$i4[1];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  bubbleSort() {\n    this.disableSortButtons();\n\n    const _getBubbleSortAnimati = getBubbleSortAnimations(this.state.array),\n          _getBubbleSortAnimati2 = _slicedToArray(_getBubbleSortAnimati, 2),\n          animations = _getBubbleSortAnimati2[0],\n          sortArray = _getBubbleSortAnimati2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i5 = _slicedToArray(animations[i], 2),\n              barOneIndex = _animations$i5[0],\n              barTwoIndex = _animations$i5[1];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i6 = _slicedToArray(animations[i], 2),\n              barIndex = _animations$i6[0],\n              newHeight = _animations$i6[1];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  insertionSort() {\n    this.disableSortButtons();\n\n    const _getInsertionSortAnim = getInsertionSortAnimations(this.state.array),\n          _getInsertionSortAnim2 = _slicedToArray(_getInsertionSortAnim, 2),\n          animations = _getInsertionSortAnim2[0],\n          sortArray = _getInsertionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i7 = _slicedToArray(animations[i], 3),\n              temp = _animations$i7[0],\n              barOneIndex = _animations$i7[1],\n              barTwoIndex = _animations$i7[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i8 = _slicedToArray(animations[i], 3),\n              temp = _animations$i8[0],\n              barIndex = _animations$i8[1],\n              newHeight = _animations$i8[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  selectionSort() {\n    this.disableSortButtons();\n\n    const _getSelectionSortAnim = getSelectionSortAnimations(this.state.array),\n          _getSelectionSortAnim2 = _slicedToArray(_getSelectionSortAnim, 2),\n          animations = _getSelectionSortAnim2[0],\n          sortArray = _getSelectionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i9 = _slicedToArray(animations[i], 3),\n              temp = _animations$i9[0],\n              barOneIndex = _animations$i9[1],\n              barTwoIndex = _animations$i9[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i10 = _slicedToArray(animations[i], 3),\n              temp = _animations$i10[0],\n              barIndex = _animations$i10[1],\n              newHeight = _animations$i10[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  render() {\n    const array = this.state.array;\n    const SORT_BUTTONS = 6;\n    const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"array-container\",\n      style: {\n        position: 'absolute',\n        right: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      title: \"Generates a new random array\",\n      style: {\n        position: 'relative',\n        top: \"\".concat(0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS, \"px\")\n      },\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      title: \"O(NlogN) Time Complexity\",\n      id: \"mergeSort\",\n      style: {\n        position: 'relative',\n        top: \"\".concat(0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS, \"px\")\n      },\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      title: \"O(N^2) Time Complexity\",\n      id: \"quickSort\",\n      style: {\n        position: 'relative',\n        top: \"\".concat(1.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS, \"px\")\n      },\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      title: \"O(N^2) Time Complexity\",\n      id: \"bubbleSort\",\n      style: {\n        position: 'relative',\n        top: \"\".concat(2.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS, \"px\")\n      },\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      title: \"O(N^2) Time Complexity\",\n      id: \"insertionSort\",\n      style: {\n        position: 'relative',\n        top: \"\".concat(3.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS, \"px\")\n      },\n      onClick: () => this.insertionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Insertion Sort\"), React.createElement(\"button\", {\n      title: \"O(N^2) Time Complexity\",\n      id: \"selectionSort\",\n      style: {\n        position: 'relative',\n        top: \"\".concat(5.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS, \"px\")\n      },\n      onClick: () => this.selectionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Selection Sort\")));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/sudarshan/Documents/personalProjects/csals-sorting-visualizer/Sorting-Visualizer/src/SortingVisualizer/SortingVisualizer.js"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","getBubbleSortAnimations","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","reportWindowSize","onresize","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","DISABLED_BUTTON","ENABLED_BUTTON","nlogn","nSquare","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","restoreStoreButtons","disableSortButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","mergeSort","animations","sortArray","length","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","quickSort","barIndex","barStyle","bubbleSort","insertionSort","temp","selectionSort","render","SORT_BUTTONS","TOTAL_BUTTONS","position","right","map","value","idx","top","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\n//import {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\n\nfunction reportWindowSize() {\n    WINDOW_WIDTH =  window.innerWidth;\n    WINDOW_HEIGHT = window.innerHeight;\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200)/8);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\n\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 10; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-30));\n        }\n        this.setState({array: array});\n        this.restoreStoreButtons();\n    }\n    disableSortButtons() {\n        document.getElementById(\"mergeSort\").disabled = true;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"heapSort\").disabled = true;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n    }\n    restoreStoreButtons() {\n        document.getElementById(\"mergeSort\").disabled = false;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"heapSort\").disabled = false;\n        buttonStyle = document.getElementById(\"heapSort\").style;\n        document.getElementById(\"heapSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n    //Sorting Algorithms\n    mergeSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    quickSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    bubbleSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    insertionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    selectionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return(\n            <>\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random array\" style={{position:'relative',top:`${0*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.resetArray()}>\n                    Generate New Array\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.mergeSort()}>\n                    Merge Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\" style={{position:'relative',top:`${1.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.quickSort()}>\n                    Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:`${2.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.bubbleSort()}>\n                    Bubble Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\" style={{position:'relative',top:`${3.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.insertionSort()}>\n                    Insertion Sort\n                </button>\n                \n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\" style={{position:'relative',top:`${5.5*(WINDOW_HEIGHT-20)/TOTAL_BUTTONS}px`}} onClick={() => this.selectionSort()}>\n                    Selection Sort\n                </button>\n            </div>    \n            </>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n\n\n"]},"metadata":{},"sourceType":"module"}